{"version":3,"sources":["utilities/parseDate.js","ShowWrapper/index.js","Home/index.js","utilities/episodeMap.js","utilities/subtractISODates.js","services/fetchEpisode.js","services/fetchJWTToken.js","App.js","reportWebVitals.js","index.js"],"names":["toPST","basicDate","toLocaleString","timeZone","toSeconds","UTCRemaining","seconds","amount","unit","toMins","mins","toHours","hours","ShowWrapper","changeDate","airDate","nexpisode","className","pst","onClick","Home","href","episodeMap","bachelor","bachelorette","southpark","sp","isoDateToCompare","isoDate","parts","match","Date","subtractISODates","nextAiredISO","todayISO","TVDB_API_HOST","process","token","episode","a","fetch","method","headers","Authorization","response","json","console","log","Error","fetchEpisode","data","apikey","pin","accept","body","JSON","stringify","fetchJWTToken","dateMap","days","App","useState","setEpisode","updateNexpisode","dateIndex","updateDateIndex","iso","toISOString","nextAired","updateNextAired","today","updateToday","nextDateIndex","length","useEffect","episodeString","window","location","pathname","replace","then","episodeData","nextAiredTVDBIso","remaining","maximumFractionDigits","intervalID","setInterval","clearInterval","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.184c14fe.chunk.js","sourcesContent":["export const PST = \"T20:00:00\";\nexport const toPST = (basicDate) =>\n\tbasicDate.toLocaleString(\"en-US\", { timeZone: \"PST\" });\n\nexport const toSeconds = (UTCRemaining) => {\n\tconst seconds = UTCRemaining / 1000;\n\treturn {\n\t\tamount: seconds,\n\t\tunit: seconds > 1 ? \"seconds\" : \"second\",\n\t};\n};\n\nexport const toMins = (UTCRemaining) => {\n\tconst mins = toSeconds(UTCRemaining).amount / 60;\n\treturn {\n\t\tamount: mins,\n\t\tunit: mins > 1 ? \"mins\" : \"min\",\n\t};\n};\n\nexport const toHours = (UTCRemaining) => {\n\tconst hours = toMins(UTCRemaining).amount / 60;\n\treturn {\n\t\tamount: hours,\n\t\tunit: hours > 1 ? \"hours \" : \"hour\",\n\t};\n};\n\nexport const toDays = (UTCRemaining) => {\n\tconst days = toHours(UTCRemaining).amount / 24;\n\treturn {\n\t\tamount: days,\n\t\tunit: days > 1 ? \"days \" : \"day\",\n\t};\n};\n\nexport const toDaysHoursMinsSeconds = () => {\n\treturn new Date();\n};\n","import \"./index.css\";\n\nconst ShowWrapper = ({changeDate, airDate, nexpisode}) => (\n    <div className=\"episode\">\n    <div>Next Air Date: {airDate.pst}</div>\n    <br />\n    <button onClick={changeDate}>\n                            {nexpisode}\n                            <br />\n                            remaining...\n        </button>\n    </div>\n    );\n    \n    export default ShowWrapper;","import './index.css';\n\nconst Home = () => (\n    <div className=\"wrapper\">\n    <div>When is the next episode?</div>\n    <div className='shows'>    \n    <a href=\"/bachelor\"> Bachelor</a>\n    <a href=\"/sp\"> South Park</a>\n    </div>\n    </div>\n);\n\nexport default Home;","const episodeMap = {\n\tbachelor: \"70869?year=25\",\n\tbachelorette: \"71187?year=19\",\n\tsouthpark: '75897?year=25',\n\tsp: '75897?year=25',\n};\n\nexport default episodeMap;\n","// makes date able to be subtracted from\nconst isoDateToCompare = (isoDate) => {\n\tconst parts = isoDate.match(/\\d+/g);\n\treturn new Date(\n\t\tparts[0],\n\t\tparts[1] - 1,\n\t\tparts[2],\n\t\tparts[3],\n\t\tparts[4],\n\t\tparts[5],\n\t);\n};\n\nconst subtractISODates = (nextAiredISO, todayISO) =>\n\tisoDateToCompare(nextAiredISO) - isoDateToCompare(todayISO);\n\nexport default subtractISODates;\n","const TVDB_API_HOST =\n\tprocess.env.NODE_ENV === \"development\"\n\t\t? \"\"\n\t\t: process.env.REACT_APP_TVDB_API_HOST;\n\nasync function fetchEpisode(token, episode) {\n\ttry {\n\t\tconst response = await fetch(`${TVDB_API_HOST}/v4/series/${episode}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t});\n\n\t\treturn response.json();\n\t} catch (err) {\n\t\tconsole.log(`failure fetching episode: ${episode}`);\n\t\tthrow new Error(err);\n\t}\n}\n\nexport default fetchEpisode;\n","const TVDB_API_HOST =\n\tprocess.env.NODE_ENV === \"development\"\n\t\t? \"\"\n\t\t: process.env.REACT_APP_TVDB_API_HOST;\nconst TVDB_API_KEY = process.env.REACT_APP_TVDB_API_KEY;\nconst TVDB_API_PIN = process.env.REACT_APP_TVDB_API_PIN;\n\nconst data = {\n\tapikey: TVDB_API_KEY,\n\tpin: TVDB_API_PIN,\n};\n\nconst headers = {\n\t\"Content-Type\": \"application/json\",\n\taccept: \"application/json\",\n};\n\nasync function fetchJWTToken() {\n\ttry {\n\t\tconst response = await fetch(`${TVDB_API_HOST}/v4/login`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: JSON.stringify(data),\n\t\t});\n\n\t\treturn response.json();\n\t} catch (err) {\n\t\tconsole.log(\"JWT token error\");\n\t\tthrow new Error(err);\n\t}\n}\n\nexport default fetchJWTToken;\n","import { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n\tPST,\n\ttoPST,\n\ttoSeconds,\n\ttoMins,\n\ttoHours,\n\ttoDays,\n} from \"./utilities/parseDate\";\nimport ShowWrapper from \"./ShowWrapper\";\nimport Home from \"./Home\";\nimport episodeMap from './utilities/episodeMap';\nimport subtractISODates from \"./utilities/subtractISODates\";\nimport fetchEpisode from \"./services/fetchEpisode\";\nimport fetchJWTToken from \"./services/fetchJWTToken\";\n\nconst dateMap = [toSeconds, toMins, toHours, toDays];\n\nconst App = () => {\n\tconst [episode, setEpisode] = useState(null);\n\tconst [nexpisode, updateNexpisode] = useState(\"¯\\\\_(ツ)_/¯\");\n\tconst [dateIndex, updateDateIndex] = useState(0);\n\tconst [nextAired, updateNextAired] = useState({\n\t\tiso: new Date().toISOString(),\n\t\tpst: toPST(new Date()),\n\t});\n\tconst [today, updateToday] = useState({\n\t\tiso: new Date().toISOString(),\n\t\tpst: toPST(new Date()),\n\t});\n\n\tconst changeDate = () => {\n\t\tconst nextDateIndex = (dateIndex + 1) % dateMap.length;\n\t\tupdateDateIndex(nextDateIndex);\n\t};\n\n\t// we're using two useEffect since we only need to make our fetch call once\n\t// on request\n\tuseEffect(() => {\n\t\t// set the episode\n\t\tconst episodeString = window.location.pathname.replace(/\\W/g, \"\");\n\n\t\tif (episodeString) {\n\t\t\tsetEpisode(episodeMap[episodeString]);\n\t\t}\n\n\t\tif (episode) {\n\t\t\tfetchJWTToken().then((token) => {\n\t\t\t\tfetchEpisode(token.data.token, episode).then((episodeData) => {\n\t\t\t\t\tif (episodeData.data.nextAired) {\n\t\t\t\t\t\tconst nextAiredTVDBIso = new Date(\n\t\t\t\t\t\t\t`${episodeData.data.nextAired}${PST}`,\n\t\t\t\t\t\t).toISOString();\n\t\t\t\t\t\tupdateNextAired({\n\t\t\t\t\t\t\tiso: nextAiredTVDBIso,\n\t\t\t\t\t\t\tpst: toPST(new Date(nextAiredTVDBIso)),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [episode]);\n\n\tuseEffect(() => {\n\t\tconst UTCRemaining = subtractISODates(nextAired.iso, today.iso);\n\n\t\tif (UTCRemaining > 0) {\n\t\t\tconst remaining = dateMap[dateIndex](UTCRemaining);\n\t\t\tupdateNexpisode(\n\t\t\t\t`${remaining.amount.toLocaleString(\"en-US\", {\n\t\t\t\t\tmaximumFractionDigits: 0,\n\t\t\t\t})} ${remaining.unit}`,\n\t\t\t);\n\t\t}\n\t\t// cause a rerender every second\n\t\tconst intervalID = setInterval(\n\t\t\t() => updateToday({ iso: new Date().toISOString(), pst: toPST(Date()) }),\n\t\t\t1000,\n\t\t);\n\n\t\treturn () => clearInterval(intervalID);\n\t}, [nextAired, dateIndex, today]);\n\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/bachelor\">\n\t\t\t\t\t<ShowWrapper nexpisode={nexpisode} airDate={nextAired} changeDate={changeDate} />\n\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/bachelorette\" onClick={changeDate}>\n\t\t\t\t<ShowWrapper nexpisode={nexpisode} airDate={nextAired} changeDate={changeDate} />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path=\"/sp\">\n\t\t\t\t\t<ShowWrapper nexpisode={nexpisode} airDate={nextAired} changeDate={changeDate} />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path=\"/south-park\">\n\t\t\t\t\t<ShowWrapper nexpisode={nexpisode} airDate={nextAired} changeDate={changeDate} />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t<Home />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}