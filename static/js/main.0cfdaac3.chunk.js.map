{"version":3,"sources":["components/Bachelor/index.js","App.js","reportWebVitals.js","index.js"],"names":["Bachelor","toPST","basicDate","toLocaleString","timeZone","useState","nexpisode","updateNexpisode","iso","pst","nextAired","updateNextAired","Date","toISOString","today","updateToday","isoDateToCompare","isostr","parts","match","useEffect","data","apikey","process","pin","headers","a","console","log","fetch","method","body","JSON","stringify","response","json","Error","token","fetchJWTToken","then","fetchBachelorEpisode","episodeData","nextAiredTVDBIso","lastAired","remaining","toFixed","intervalID","setInterval","clearInterval","className","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA8FeA,EA1FE,WACf,IAAMC,EAAQ,SAACC,GAAD,OAAeA,EAAUC,eAAe,QAAS,CAAEC,SAAU,SADtD,EAGgBC,mBAAS,yBAHzB,mBAGdC,EAHc,KAGHC,EAHG,OAIgBF,mBAAS,CAAEG,IAAK,KAAMC,IAAK,OAJ3C,mBAIdC,EAJc,KAIHC,EAJG,OAKQN,mBAAS,CAAEG,KAAK,IAAII,MAAOC,cAAeJ,IAAKR,EAAM,IAAIW,QALjE,mBAKdE,EALc,KAKPC,EALO,KASfC,EAAmB,SAACC,GACxB,IAAIC,EAAQD,EAAOE,MAAM,QACzB,OAAO,IAAIP,KAAKM,EAAM,GAAIA,EAAM,GAAK,EAAGA,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIA,EAAM,KAqE9E,OAjEAE,qBAAU,WAER,IAEMC,EAAO,CACXC,OAHmBC,uCAInBC,IAAK,UAGDC,EAAU,CACd,eAAgB,mBAChB,OAAU,oBAXE,4CAcd,4BAAAC,EAAA,sEAEIC,QAAQC,IAAI,6BAFhB,SAG2BC,MAAM,YAAa,CACxCC,OAAQ,OACRL,QAASA,EACTM,KAAMC,KAAKC,UAAUZ,KAN3B,cAGUa,EAHV,yBASWA,EAASC,QATpB,sCAYIR,QAAQC,IAAI,yBACN,IAAIQ,MAAJ,MAbV,0DAdc,kEA+Bd,WAAoCC,GAApC,eAAAX,EAAA,sEAEIC,QAAQC,IAAI,oCAFhB,SAG2BC,MAAM,2BAA4B,CACvDC,OAAQ,MACRL,QAAS,CACP,cAAgB,UAAhB,OAA2BY,MANnC,cAGUH,EAHV,yBAUWA,EAASC,QAVpB,sCAaIR,QAAQC,IAAI,oCACN,IAAIQ,MAAJ,MAdV,0DA/Bc,kEAiDdE,GAAgBC,MAAK,SAAAF,IAjDP,4CAkDZG,CAAqBH,EAAMhB,KAAKgB,OAAOE,MAAK,SAAAE,GAC1C,IAAMC,EAAmB,IAAI9B,KAAJ,UAAY6B,EAAYpB,KAAKsB,WAA7B,OA3Dd,cA2DmE9B,cACxE+B,IAAc5B,EAAiB0B,GAAoB1B,EAAiBF,EAAMN,MAAQ,KAAOqC,QAAQ,GACnGH,EAAmB5B,EAAMN,MAC3BD,EAAgB,GAAD,OAAIqC,EAAJ,UACfjC,EAAgB,CAAEF,IAAKR,EAAM,IAAIW,KAAK8B,aAK5C,IAAMI,EAAaC,aAAY,kBAAMhC,EAAY,CAAEP,KAAK,IAAII,MAAOC,cAAeJ,IAAKR,EAAMW,YAAY,KAEzG,OAAO,kBAAMoC,cAAcF,MAE1B,CAACvC,EAAiBO,EAAOR,IAE1B,sBAAK2C,UAAU,WAAf,UACG3C,EACD,uBAFF,eAIGI,EAAUD,Q,qBCrEFyC,MAZf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YAAlB,SACE,cAAC,EAAD,WCDKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0cfdaac3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style.css';\n\n\nconst Bachelor = () => {\n  const toPST = (basicDate) => basicDate.toLocaleString(\"en-US\", { timeZone: \"PST\" });\n\n  const [nexpisode, updateNexpisode] = useState(\"¯\\\\_(ツ)_/¯\");\n  const [nextAired, updateNextAired] = useState({ iso: null, pst: null });\n  const [today, updateToday] = useState({ iso: new Date().toISOString(), pst: toPST(new Date()) });\n\n  const PST_TIME = 'T20:00:00';\n\n  const isoDateToCompare = (isostr) => {\n    var parts = isostr.match(/\\d+/g);\n    return new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]);\n  }\n\n\n  useEffect(() => {\n\n    const TVDB_API_KEY = process.env.REACT_APP_TVDB_API_KEY;\n\n    const data = {\n      apikey: TVDB_API_KEY,\n      pin: 'string',\n    };\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'accept': 'application/json',\n    };\n\n    async function fetchJWTToken() {\n      try {\n        console.log('trying to fetch jwt token')\n        const response = await fetch('/v4/login', {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify(data)\n        });\n\n        return response.json();\n\n      } catch (err) {\n        console.log('fetch JWT token error')\n        throw new Error(err);\n      }\n    };\n\n    async function fetchBachelorEpisode(token) {\n      try {\n        console.log('trying to fetch bachelor episode');\n        const response = await fetch('/v4/series/70869?year=25', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        });\n\n        return response.json();\n\n      } catch (err) {\n        console.log('failure getting bachelor episode');\n        throw new Error(err);\n      }\n    }\n\n    fetchJWTToken().then(token => {\n      fetchBachelorEpisode(token.data.token).then(episodeData => {\n        const nextAiredTVDBIso = new Date(`${episodeData.data.lastAired}${PST_TIME}`).toISOString();\n        const remaining = ((isoDateToCompare(nextAiredTVDBIso) - isoDateToCompare(today.iso)) / 60000).toFixed(2);\n        if (nextAiredTVDBIso > today.iso) {\n          updateNexpisode(`${remaining} mins`);\n          updateNextAired({ pst: toPST(new Date(nextAiredTVDBIso)) });\n        }\n      });\n    })\n\n    const intervalID = setInterval(() => updateToday({ iso: new Date().toISOString(), pst: toPST(Date()) }), 3000);\n\n    return () => clearInterval(intervalID);\n\n  }, [updateNexpisode, today, nexpisode])\n  return (\n    <div className=\"bachelor\">\n      {nexpisode}\n      <br />\n      remaining...\n      {nextAired.pst}\n    </div>\n  )\n}\n\nexport default Bachelor;","import Bachelor from './components/Bachelor';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/bachelor\">\n          <Bachelor />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}