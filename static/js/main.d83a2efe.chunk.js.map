{"version":3,"sources":["utilities/parseDate.js","utilities/episodeMap.js","utilities/subtractISODates.js","services/fetchEpisode.js","services/fetchJWTToken.js","ShowWrapper/index.js","Home/index.js","App.js","reportWebVitals.js","index.js"],"names":["toPST","basicDate","toLocaleString","timeZone","toSeconds","UTCRemaining","seconds","amount","unit","toMins","mins","toHours","hours","episodeMap","bachelor","kardashians","bachelorette","st","southpark","sp","isoDateToCompare","isoDate","parts","match","Date","subtractISODates","nextAiredISO","todayISO","TVDB_API_HOST","process","token","episode","a","fetch","method","headers","Authorization","response","json","console","log","Error","fetchEpisode","data","apikey","pin","accept","body","JSON","stringify","fetchJWTToken","dateMap","days","ShowWrapper","id","useParams","useState","setEpisode","nexpisode","updateNexpisode","dateIndex","updateDateIndex","iso","toISOString","pst","nextAired","updateNextAired","today","updateToday","useEffect","then","episodeData","nextAiredTVDBIso","remaining","maximumFractionDigits","intervalID","setInterval","clearInterval","className","onClick","nextDateIndex","length","Home","href","App","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.d83a2efe.chunk.js","sourcesContent":["export const PST = \"T20:00:00\";\nexport const toPST = (basicDate) =>\n\tbasicDate.toLocaleString(\"en-US\", { timeZone: \"PST\" });\n\nexport const toSeconds = (UTCRemaining) => {\n\tconst seconds = UTCRemaining / 1000;\n\treturn {\n\t\tamount: seconds,\n\t\tunit: seconds > 1 ? \"seconds\" : \"second\",\n\t};\n};\n\nexport const toMins = (UTCRemaining) => {\n\tconst mins = toSeconds(UTCRemaining).amount / 60;\n\treturn {\n\t\tamount: mins,\n\t\tunit: mins > 1 ? \"mins\" : \"min\",\n\t};\n};\n\nexport const toHours = (UTCRemaining) => {\n\tconst hours = toMins(UTCRemaining).amount / 60;\n\treturn {\n\t\tamount: hours,\n\t\tunit: hours > 1 ? \"hours \" : \"hour\",\n\t};\n};\n\nexport const toDays = (UTCRemaining) => {\n\tconst days = toHours(UTCRemaining).amount / 24;\n\treturn {\n\t\tamount: days,\n\t\tunit: days > 1 ? \"days \" : \"day\",\n\t};\n};\n\nexport const toDaysHoursMinsSeconds = () => {\n\treturn new Date();\n};\n","const episodeMap = {\n  bachelor: \"70869?year=25\",\n  kardashians: \"80725?year=20\",\n  bachelorette: \"71187?year=19\",\n  st: \"305288?year=4\",\n  southpark: \"75897?year=25\",\n  sp: \"75897?year=25\",\n};\n\nexport default episodeMap;\n","// makes date able to be subtracted from\nconst isoDateToCompare = (isoDate) => {\n\tconst parts = isoDate.match(/\\d+/g);\n\treturn new Date(\n\t\tparts[0],\n\t\tparts[1] - 1,\n\t\tparts[2],\n\t\tparts[3],\n\t\tparts[4],\n\t\tparts[5],\n\t);\n};\n\nconst subtractISODates = (nextAiredISO, todayISO) =>\n\tisoDateToCompare(nextAiredISO) - isoDateToCompare(todayISO);\n\nexport default subtractISODates;\n","const TVDB_API_HOST =\n\tprocess.env.NODE_ENV === \"development\"\n\t\t? \"\"\n\t\t: process.env.REACT_APP_TVDB_API_HOST;\n\nasync function fetchEpisode(token, episode) {\n\ttry {\n\t\tconst response = await fetch(`${TVDB_API_HOST}/v4/series/${episode}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t});\n\n\t\treturn response.json();\n\t} catch (err) {\n\t\tconsole.log(`failure fetching episode: ${episode}`);\n\t\tthrow new Error(err);\n\t}\n}\n\nexport default fetchEpisode;\n","const TVDB_API_HOST =\n\tprocess.env.NODE_ENV === \"development\"\n\t\t? \"\"\n\t\t: process.env.REACT_APP_TVDB_API_HOST;\nconst TVDB_API_KEY = process.env.REACT_APP_TVDB_API_KEY;\nconst TVDB_API_PIN = process.env.REACT_APP_TVDB_API_PIN;\n\nconst data = {\n\tapikey: TVDB_API_KEY,\n\tpin: TVDB_API_PIN,\n};\n\nconst headers = {\n\t\"Content-Type\": \"application/json\",\n\taccept: \"application/json\",\n};\n\nasync function fetchJWTToken() {\n\ttry {\n\t\tconst response = await fetch(`${TVDB_API_HOST}/v4/login`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: JSON.stringify(data),\n\t\t});\n\n\t\treturn response.json();\n\t} catch (err) {\n\t\tconsole.log(\"JWT token error\");\n\t\tthrow new Error(err);\n\t}\n}\n\nexport default fetchJWTToken;\n","import { useState, useEffect } from \"react\";\nimport {\n\tPST,\n\ttoPST,\n\ttoSeconds,\n\ttoMins,\n\ttoHours,\n\ttoDays,\n} from \"../utilities/parseDate\";\nimport { useParams } from \"react-router-dom\";\nimport episodeMap from \"../utilities/episodeMap\";\nimport subtractISODates from \"../utilities/subtractISODates\";\nimport fetchEpisode from \"../services/fetchEpisode\";\nimport fetchJWTToken from \"../services/fetchJWTToken\";\nimport \"./index.css\";\n\nconst dateMap = [toSeconds, toMins, toHours, toDays];\n\nconst ShowWrapper = () => {\n\t// Get the userId param from the URL.\n\tlet { id } = useParams();\n\tconst [episode, setEpisode] = useState(null);\n\tconst [nexpisode, updateNexpisode] = useState(\"¯\\\\_(ツ)_/¯\");\n\tconst [dateIndex, updateDateIndex] = useState(0);\n\tconst [nextAired, updateNextAired] = useState({\n\t\tiso: new Date().toISOString(),\n\t\tpst: toPST(new Date()),\n\t});\n\tconst [today, updateToday] = useState({\n\t\tiso: new Date().toISOString(),\n\t\tpst: toPST(new Date()),\n\t});\n\n\tconst changeDate = () => {\n\t\tconst nextDateIndex = (dateIndex + 1) % dateMap.length;\n\t\tupdateDateIndex(nextDateIndex);\n\t};\n\n\t// we're using two useEffect since we only need to make our fetch call once\n\t// on request\n\tuseEffect(() => {\n\t\t// set the episode\n\n\t\tif (id) {\n\t\t\tif (id.match(/\\d/)) {\n\t\t\t\tsetEpisode(id);\n\t\t\t} else {\n\t\t\t\tsetEpisode(episodeMap[id]);\n\t\t\t}\n\t\t}\n\n\t\tif (episode) {\n\t\t\tfetchJWTToken().then((token) => {\n\t\t\t\tfetchEpisode(token.data.token, episode).then((episodeData) => {\n\t\t\t\t\tif (episodeData.data?.nextAired) {\n\t\t\t\t\t\tconst nextAiredTVDBIso = new Date(\n\t\t\t\t\t\t\t`${episodeData.data.nextAired}${PST}`,\n\t\t\t\t\t\t).toISOString();\n\t\t\t\t\t\tupdateNextAired({\n\t\t\t\t\t\t\tiso: nextAiredTVDBIso,\n\t\t\t\t\t\t\tpst: toPST(new Date(nextAiredTVDBIso)),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [id, episode]);\n\n\tuseEffect(() => {\n\t\tconst UTCRemaining = subtractISODates(nextAired.iso, today.iso);\n\n\t\tif (UTCRemaining > 0) {\n\t\t\tconst remaining = dateMap[dateIndex](UTCRemaining);\n\t\t\tupdateNexpisode(\n\t\t\t\t`${remaining.amount.toLocaleString(\"en-US\", {\n\t\t\t\t\tmaximumFractionDigits: 0,\n\t\t\t\t})} ${remaining.unit}`,\n\t\t\t);\n\t\t}\n\t\t// cause a rerender every second\n\t\tconst intervalID = setInterval(\n\t\t\t() =>\n\t\t\t\tupdateToday({ iso: new Date().toISOString(), pst: toPST(new Date()) }),\n\t\t\t1000,\n\t\t);\n\n\t\treturn () => clearInterval(intervalID);\n\t}, [nextAired, dateIndex, today]);\n\n\treturn (\n\t\t<div className=\"episode\">\n\t\t\t<div>\n\t\t\t\tNext Air Date:{\" \"}\n\t\t\t\t{nextAired.pst > today.pst ? nextAired.pst : \"¯\\\\_(ツ)_/¯\"}\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<button onClick={changeDate}>\n\t\t\t\t{nexpisode}\n\t\t\t\t<br />\n\t\t\t\tremaining...\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default ShowWrapper;\n","import \"./index.css\";\n\nconst Home = () => (\n  <div className=\"wrapper\">\n    <div>When is the next episode?</div>\n    <div className=\"shows\">\n      <a href=\"/bachelor\"> Bachelor</a>\n      <a href=\"/bachelorette\"> Bachelorette</a>\n      <a href=\"/sp\"> South Park</a>\n      <a href=\"/st\"> Stranger Things</a>\n      <a href=\"/kardashians\"> Keeping up with the Kardashians</a>\n    </div>\n  </div>\n);\n\nexport default Home;\n","import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nimport ShowWrapper from \"./ShowWrapper\";\nimport Home from \"./Home\";\n\nconst App = () => {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Routes>\n\t\t\t\t<Route exact path=\"/\" element={<Home />} />\n\t\t\t\t<Route path=\":id\" element={<ShowWrapper />} />\n\t\t\t</Routes>\n\t\t</BrowserRouter>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst container = document.getElementById(\"root\");\n\n// Create a root.\nconst root = ReactDOM.createRoot(container);\n\n// Initial render\nroot.render(<App />);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}