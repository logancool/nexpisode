{"version":3,"sources":["utilities/parseDate.js","utilities/subtractISODates.js","services/fetchEpisode.js","services/fetchJWTToken.js","App.js","reportWebVitals.js","index.js"],"names":["toPST","basicDate","toLocaleString","timeZone","isoDateToCompare","isoDate","parts","match","Date","subtractISODates","nextAiredISO","todayISO","toFixed","TVDB_API_HOST","process","token","episode","a","console","log","fetch","method","headers","Authorization","response","json","Error","fetchEpisode","data","apikey","pin","accept","body","JSON","stringify","fetchJWTToken","episodeMap","bachelor","grey","App","useState","setEpisode","nexpisode","updateNexpisode","iso","toISOString","pst","nextAired","updateNextAired","today","updateToday","useEffect","episodeString","window","location","pathname","replace","then","episodeData","nextAiredTVDBIso","lastAired","remaining","intervalID","setInterval","clearInterval","exact","path","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53f07c21.chunk.js","sourcesContent":["export const PST = \"T20:00:00\";\nexport const toPST = (basicDate) =>\n\tbasicDate.toLocaleString(\"en-US\", { timeZone: \"PST\" });\n","// makes date able to be subtracted from\nconst isoDateToCompare = (isoDate) => {\n\tconst parts = isoDate.match(/\\d+/g);\n\treturn new Date(\n\t\tparts[0],\n\t\tparts[1] - 1,\n\t\tparts[2],\n\t\tparts[3],\n\t\tparts[4],\n\t\tparts[5],\n\t);\n};\n\nfunction subtractISODates(nextAiredISO, todayISO) {\n\treturn (\n\t\t(isoDateToCompare(nextAiredISO) - isoDateToCompare(todayISO)) /\n\t\t60000\n\t).toFixed(2);\n}\n\nexport default subtractISODates;\n","const TVDB_API_HOST =\n\tprocess.env.NODE_ENV === \"development\"\n\t\t? \"\"\n\t\t: process.env.REACT_APP_TVDB_API_HOST;\n\nasync function fetchEpisode(token, episode) {\n\ttry {\n\t\tconsole.log(`trying to fetch ${episode} episode`);\n\t\tconst response = await fetch(`${TVDB_API_HOST}/v4/series/${episode}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t});\n\n\t\treturn response.json();\n\t} catch (err) {\n\t\tconsole.log(`failure getting ${episode} episode`);\n\t\tthrow new Error(err);\n\t}\n}\n\nexport default fetchEpisode;\n","const TVDB_API_HOST =\n\tprocess.env.NODE_ENV === \"development\"\n\t\t? \"\"\n\t\t: process.env.REACT_APP_TVDB_API_HOST;\nconst TVDB_API_KEY = process.env.REACT_APP_TVDB_API_KEY;\nconst TVDB_API_PIN = process.env.REACT_APP_TVDB_API_PIN;\n\nconst data = {\n\tapikey: TVDB_API_KEY,\n\tpin: TVDB_API_PIN,\n};\n\nconst headers = {\n\t\"Content-Type\": \"application/json\",\n\taccept: \"application/json\",\n};\n\nasync function fetchJWTToken() {\n\ttry {\n\t\tconsole.log(\"trying to fetch jwt token\");\n\t\tconsole.log(\"TVDB_API_HOST >\", TVDB_API_HOST);\n\t\tconst response = await fetch(`${TVDB_API_HOST}/v4/login`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: JSON.stringify(data),\n\t\t});\n\n\t\treturn response.json();\n\t} catch (err) {\n\t\tconsole.log(\"fetch JWT token error\");\n\t\tthrow new Error(err);\n\t}\n}\n\nexport default fetchJWTToken;\n","import { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { toPST, PST } from \"./utilities/parseDate\";\nimport subtractISODates from \"./utilities/subtractISODates\";\nimport fetchEpisode from \"./services/fetchEpisode\";\nimport fetchJWTToken from \"./services/fetchJWTToken\";\nimport \"./App.css\";\n\n// for the url as key what's the api query\nconst episodeMap = {\n\tbachelor: \"70869?year=25\",\n\tgrey: \"\",\n};\n\nconst App = () => {\n\tconst [episode, setEpisode] = useState(null);\n\tconst [nexpisode, updateNexpisode] = useState(\"¯\\\\_(ツ)_/¯\");\n\t// currently we're not using this\n\t// eslint-disable-next-line no-unused-vars\n\tconst [nextAired, updateNextAired] = useState({\n\t\tiso: new Date().toISOString(),\n\t\tpst: toPST(new Date()),\n\t});\n\tconst [today, updateToday] = useState({\n\t\tiso: new Date().toISOString(),\n\t\tpst: toPST(new Date()),\n\t});\n\n\t// we're using two useEffect since we only need to make our fetch call once\n\t// on request\n\tuseEffect(() => {\n\t\t// set the episode\n\t\tconst episodeString = window.location.pathname.replace(/\\W/g, \"\");\n\n\t\tif (episodeString) {\n\t\t\tsetEpisode(episodeMap[episodeString]);\n\t\t}\n\n\t\tif (episode) {\n\t\t\tfetchJWTToken().then((token) => {\n\t\t\t\tconsole.log(episode);\n\t\t\t\tfetchEpisode(token.data.token, episode).then((episodeData) => {\n\t\t\t\t\tconst nextAiredTVDBIso = new Date(\n\t\t\t\t\t\t`${episodeData.data.lastAired}${PST}`,\n\t\t\t\t\t).toISOString();\n\t\t\t\t\tupdateNextAired({\n\t\t\t\t\t\tiso: nextAiredTVDBIso,\n\t\t\t\t\t\tpst: toPST(new Date(nextAiredTVDBIso)),\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [episode]);\n\n\tuseEffect(() => {\n\t\tconst remaining = subtractISODates(nextAired.iso, today.iso);\n\n\t\tif (remaining > 0) {\n\t\t\tupdateNexpisode(`${remaining} mins`);\n\t\t}\n\n\t\tconst intervalID = setInterval(\n\t\t\t() => updateToday({ iso: new Date().toISOString(), pst: toPST(Date()) }),\n\t\t\t1000,\n\t\t);\n\n\t\treturn () => clearInterval(intervalID);\n\t}, [nextAired, today]);\n\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/bachelor\">\n\t\t\t\t\t<div className=\"episode\">\n\t\t\t\t\t\t{nexpisode}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tremaining...\n\t\t\t\t\t</div>\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path=\"/grey\">\n\t\t\t\t\t<div className=\"episode\">\n\t\t\t\t\t\t{nexpisode}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tremaining...\n\t\t\t\t\t</div>\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t<div className=\"episode\">When is the next episode?</div>\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}