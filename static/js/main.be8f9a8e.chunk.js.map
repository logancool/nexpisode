{"version":3,"sources":["utilities/parseDate.js","ShowWrapper/index.js","Home/index.js","utilities/episodeMap.js","utilities/subtractISODates.js","services/fetchEpisode.js","services/fetchJWTToken.js","App.js","reportWebVitals.js","index.js"],"names":["toPST","basicDate","toLocaleString","timeZone","toSeconds","UTCRemaining","seconds","amount","unit","toMins","mins","toHours","hours","today","Date","ShowWrapper","changeDate","airDate","nexpisode","className","pst","onClick","Home","href","episodeMap","bachelor","kardashians","bachelorette","st","southpark","sp","isoDateToCompare","isoDate","parts","match","subtractISODates","nextAiredISO","todayISO","TVDB_API_HOST","process","token","episode","a","fetch","method","headers","Authorization","response","json","console","log","Error","fetchEpisode","data","apikey","pin","accept","body","JSON","stringify","fetchJWTToken","dateMap","days","App","useState","setEpisode","updateNexpisode","dateIndex","updateDateIndex","iso","toISOString","nextAired","updateNextAired","updateToday","nextDateIndex","length","useEffect","episodeString","window","location","pathname","replace","then","episodeData","nextAiredTVDBIso","remaining","maximumFractionDigits","intervalID","setInterval","clearInterval","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be8f9a8e.chunk.js","sourcesContent":["export const PST = \"T20:00:00\";\nexport const toPST = (basicDate) =>\n\tbasicDate.toLocaleString(\"en-US\", { timeZone: \"PST\" });\n\nexport const toSeconds = (UTCRemaining) => {\n\tconst seconds = UTCRemaining / 1000;\n\treturn {\n\t\tamount: seconds,\n\t\tunit: seconds > 1 ? \"seconds\" : \"second\",\n\t};\n};\n\nexport const toMins = (UTCRemaining) => {\n\tconst mins = toSeconds(UTCRemaining).amount / 60;\n\treturn {\n\t\tamount: mins,\n\t\tunit: mins > 1 ? \"mins\" : \"min\",\n\t};\n};\n\nexport const toHours = (UTCRemaining) => {\n\tconst hours = toMins(UTCRemaining).amount / 60;\n\treturn {\n\t\tamount: hours,\n\t\tunit: hours > 1 ? \"hours \" : \"hour\",\n\t};\n};\n\nexport const toDays = (UTCRemaining) => {\n\tconst days = toHours(UTCRemaining).amount / 24;\n\treturn {\n\t\tamount: days,\n\t\tunit: days > 1 ? \"days \" : \"day\",\n\t};\n};\n\nexport const toDaysHoursMinsSeconds = () => {\n\treturn new Date();\n};\n","import { toPST } from \"../utilities/parseDate\";\nimport \"./index.css\";\n\nconst today = toPST(new Date());\nconst ShowWrapper = ({ changeDate, airDate, nexpisode }) => (\n  <div className=\"episode\">\n    <div>\n      Next Air Date: {airDate.pst > today ? airDate.pst : \"¯\\\\_(ツ)_/¯\"}\n    </div>\n    <br />\n    <button onClick={changeDate}>\n      {nexpisode}\n      <br />\n      remaining...\n    </button>\n  </div>\n);\n\nexport default ShowWrapper;\n","import \"./index.css\";\n\nconst Home = () => (\n  <div className=\"wrapper\">\n    <div>When is the next episode?</div>\n    <div className=\"shows\">\n      <a href=\"/bachelor\"> Bachelor</a>\n      <a href=\"/bachelorette\"> Bachelorette</a>\n      <a href=\"/sp\"> South Park</a>\n      <a href=\"/st\"> Stranger Things</a>\n      <a href=\"/kardashians\"> Keeping up with the Kardashians</a>\n    </div>\n  </div>\n);\n\nexport default Home;\n","const episodeMap = {\n  bachelor: \"70869?year=25\",\n  kardashians: \"80725?year=20\",\n  bachelorette: \"71187?year=19\",\n  st: \"305288?year=4\",\n  southpark: \"75897?year=25\",\n  sp: \"75897?year=25\",\n};\n\nexport default episodeMap;\n","// makes date able to be subtracted from\nconst isoDateToCompare = (isoDate) => {\n\tconst parts = isoDate.match(/\\d+/g);\n\treturn new Date(\n\t\tparts[0],\n\t\tparts[1] - 1,\n\t\tparts[2],\n\t\tparts[3],\n\t\tparts[4],\n\t\tparts[5],\n\t);\n};\n\nconst subtractISODates = (nextAiredISO, todayISO) =>\n\tisoDateToCompare(nextAiredISO) - isoDateToCompare(todayISO);\n\nexport default subtractISODates;\n","const TVDB_API_HOST =\n\tprocess.env.NODE_ENV === \"development\"\n\t\t? \"\"\n\t\t: process.env.REACT_APP_TVDB_API_HOST;\n\nasync function fetchEpisode(token, episode) {\n\ttry {\n\t\tconst response = await fetch(`${TVDB_API_HOST}/v4/series/${episode}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t});\n\n\t\treturn response.json();\n\t} catch (err) {\n\t\tconsole.log(`failure fetching episode: ${episode}`);\n\t\tthrow new Error(err);\n\t}\n}\n\nexport default fetchEpisode;\n","const TVDB_API_HOST =\n\tprocess.env.NODE_ENV === \"development\"\n\t\t? \"\"\n\t\t: process.env.REACT_APP_TVDB_API_HOST;\nconst TVDB_API_KEY = process.env.REACT_APP_TVDB_API_KEY;\nconst TVDB_API_PIN = process.env.REACT_APP_TVDB_API_PIN;\n\nconst data = {\n\tapikey: TVDB_API_KEY,\n\tpin: TVDB_API_PIN,\n};\n\nconst headers = {\n\t\"Content-Type\": \"application/json\",\n\taccept: \"application/json\",\n};\n\nasync function fetchJWTToken() {\n\ttry {\n\t\tconst response = await fetch(`${TVDB_API_HOST}/v4/login`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: JSON.stringify(data),\n\t\t});\n\n\t\treturn response.json();\n\t} catch (err) {\n\t\tconsole.log(\"JWT token error\");\n\t\tthrow new Error(err);\n\t}\n}\n\nexport default fetchJWTToken;\n","import { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  PST,\n  toPST,\n  toSeconds,\n  toMins,\n  toHours,\n  toDays,\n} from \"./utilities/parseDate\";\nimport ShowWrapper from \"./ShowWrapper\";\nimport Home from \"./Home\";\nimport episodeMap from \"./utilities/episodeMap\";\nimport subtractISODates from \"./utilities/subtractISODates\";\nimport fetchEpisode from \"./services/fetchEpisode\";\nimport fetchJWTToken from \"./services/fetchJWTToken\";\n\nconst dateMap = [toSeconds, toMins, toHours, toDays];\n\nconst App = () => {\n  const [episode, setEpisode] = useState(null);\n  const [nexpisode, updateNexpisode] = useState(\"¯\\\\_(ツ)_/¯\");\n  const [dateIndex, updateDateIndex] = useState(0);\n  const [nextAired, updateNextAired] = useState({\n    iso: new Date().toISOString(),\n    pst: toPST(new Date()),\n  });\n  const [today, updateToday] = useState({\n    iso: new Date().toISOString(),\n    pst: toPST(new Date()),\n  });\n\n  const changeDate = () => {\n    const nextDateIndex = (dateIndex + 1) % dateMap.length;\n    updateDateIndex(nextDateIndex);\n  };\n\n  // we're using two useEffect since we only need to make our fetch call once\n  // on request\n  useEffect(() => {\n    // set the episode\n    const episodeString = window.location.pathname.replace(/\\W/g, \"\");\n\n    if (episodeString) {\n      setEpisode(episodeMap[episodeString]);\n    }\n\n    if (episode) {\n      fetchJWTToken().then((token) => {\n        fetchEpisode(token.data.token, episode).then((episodeData) => {\n          if (episodeData.data.nextAired) {\n            const nextAiredTVDBIso = new Date(\n              `${episodeData.data.nextAired}${PST}`\n            ).toISOString();\n            updateNextAired({\n              iso: nextAiredTVDBIso,\n              pst: toPST(new Date(nextAiredTVDBIso)),\n            });\n          }\n        });\n      });\n    }\n  }, [episode]);\n\n  useEffect(() => {\n    const UTCRemaining = subtractISODates(nextAired.iso, today.iso);\n\n    if (UTCRemaining > 0) {\n      const remaining = dateMap[dateIndex](UTCRemaining);\n      updateNexpisode(\n        `${remaining.amount.toLocaleString(\"en-US\", {\n          maximumFractionDigits: 0,\n        })} ${remaining.unit}`\n      );\n    }\n    // cause a rerender every second\n    const intervalID = setInterval(\n      () => updateToday({ iso: new Date().toISOString(), pst: toPST(Date()) }),\n      1000\n    );\n\n    return () => clearInterval(intervalID);\n  }, [nextAired, dateIndex, today]);\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/bachelor\">\n          <ShowWrapper\n            nexpisode={nexpisode}\n            airDate={nextAired}\n            changeDate={changeDate}\n          />\n        </Route>\n        <Route exact path=\"/kardashians\">\n          <ShowWrapper\n            nexpisode={nexpisode}\n            airDate={nextAired}\n            changeDate={changeDate}\n          />\n        </Route>\n        <Route exact path=\"/bachelorette\" onClick={changeDate}>\n          <ShowWrapper\n            nexpisode={nexpisode}\n            airDate={nextAired}\n            changeDate={changeDate}\n          />\n        </Route>\n        <Route exact path=\"/sp\">\n          <ShowWrapper\n            nexpisode={nexpisode}\n            airDate={nextAired}\n            changeDate={changeDate}\n          />\n        </Route>\n        <Route exact path=\"/st\">\n          <ShowWrapper\n            nexpisode={nexpisode}\n            airDate={nextAired}\n            changeDate={changeDate}\n          />\n        </Route>\n        <Route exact path=\"/south-park\">\n          <ShowWrapper\n            nexpisode={nexpisode}\n            airDate={nextAired}\n            changeDate={changeDate}\n          />\n        </Route>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}